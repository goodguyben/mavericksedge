<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Card Swap App</title>
    <!-- Include Tailwind CSS via CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Include GSAP via CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
    <style>
        /* Optional: Add custom styles if needed, though Tailwind handles most */
        body {
            margin: 0;
            font-family: "Inter", sans-serif;
            overflow: hidden; /* Prevent scrolling if cards move outside viewport */
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="module">
        import React, {
            Children,
            cloneElement,
            forwardRef,
            isValidElement,
            useEffect,
            useMemo,
            useRef,
        } from "https://esm.sh/react@18.2.0";
        import ReactDOM from "https://esm.sh/react-dom@18.2.0/client";
        import { Settings, CheckCircle, Code } from 'https://esm.sh/lucide-react@0.320.0'; // Import icons from lucide-react

        // GSAP is loaded via CDN and available globally.

        const Card = forwardRef((props, ref) => {
            const { customClass, icon: Icon, title, description, borderColorClass = "border-white", ...rest } = props;
            return React.createElement(
                "div",
                {
                    ref: ref,
                    ...rest,
                    className: `absolute top-1/2 left-1/2 rounded-xl border-2 ${borderColorClass} bg-black text-white
                                [transform-style:preserve-3d] [will-change:transform] [backface-visibility:hidden]
                                flex flex-col items-start justify-end p-6 overflow-hidden
                                ${customClass ?? ""} ${rest.className ?? ""}`.trim(),
                },
                // Content for the card
                React.createElement(
                    "div",
                    { className: "absolute top-4 left-4 flex items-center space-x-2" },
                    Icon && React.createElement(Icon, { className: "w-6 h-6 text-white" }),
                    title && React.createElement("span", { className: "text-sm font-semibold" }, title)
                ),
                description && React.createElement("p", { className: "text-lg font-bold mb-2" }, description)
                // You can add more content here if needed
            );
        });
        Card.displayName = "Card";

        const makeSlot = (
            i,
            distX,
            distY,
            total
        ) => ({
            x: i * distX,
            y: -i * distY,
            z: -i * distX * 1.5,
            zIndex: total - i,
        });

        const placeNow = (el, slot, skew) =>
            gsap.set(el, {
                x: slot.x,
                y: slot.y,
                z: slot.z,
                xPercent: -50,
                yPercent: -50,
                skewY: skew,
                transformOrigin: "center center",
                zIndex: slot.zIndex,
                force3D: true,
            });

        const CardSwap = ({
            width = 500,
            height = 400,
            cardDistance = 60,
            verticalDistance = 70,
            delay = 5000,
            pauseOnHover = false,
            onCardClick,
            skewAmount = 6,
            easing = "elastic",
            children,
        }) => {
            const config =
                easing === "elastic"
                    ? {
                        ease: "elastic.out(0.6,0.9)",
                        durDrop: 2,
                        durMove: 2,
                        durReturn: 2,
                        promoteOverlap: 0.9,
                        returnDelay: 0.05,
                    }
                    : {
                        ease: "power1.inOut",
                        durDrop: 0.8,
                        durMove: 0.8,
                        durReturn: 0.8,
                        promoteOverlap: 0.45,
                        returnDelay: 0.2,
                    };

            const childArr = useMemo(
                () => Children.toArray(children),
                [children]
            );
            const refs = useMemo(
                () => childArr.map(() => React.createRef()),
                [childArr.length]
            );

            const order = useRef(
                Array.from({ length: childArr.length }, (_, i) => i)
            );

            const tlRef = useRef(null);
            const intervalRef = useRef();
            const container = useRef(null);

            useEffect(() => {
                // Ensure gsap is available before using it
                if (typeof gsap === 'undefined') {
                    console.error("GSAP is not loaded. Please ensure the GSAP CDN script is included in your HTML.");
                    return;
                }

                const total = refs.length;
                refs.forEach((r, i) =>
                    placeNow(
                        r.current,
                        makeSlot(i, cardDistance, verticalDistance, total),
                        skewAmount
                    )
                );

                const swap = () => {
                    if (order.current.length < 2) return;

                    const [front, ...rest] = order.current;
                    const elFront = refs[front].current;
                    const tl = gsap.timeline();
                    tlRef.current = tl;

                    tl.to(elFront, {
                        y: "+=500",
                        duration: config.durDrop,
                        ease: config.ease,
                    });

                    tl.addLabel("promote", `-=${config.durDrop * config.promoteOverlap}`);
                    rest.forEach((idx, i) => {
                        const el = refs[idx].current;
                        const slot = makeSlot(i, cardDistance, verticalDistance, refs.length);
                        tl.set(el, { zIndex: slot.zIndex }, "promote");
                        tl.to(
                            el,
                            {
                                x: slot.x,
                                y: slot.y,
                                z: slot.z,
                                duration: config.durMove,
                                ease: config.ease,
                            },
                            `promote+=${i * 0.15}`
                        );
                    });

                    const backSlot = makeSlot(
                        refs.length - 1,
                        cardDistance,
                        verticalDistance,
                        refs.length
                    );
                    tl.addLabel("return", `promote+=${config.durMove * config.returnDelay}`);
                    tl.call(
                        () => {
                            gsap.set(elFront, { zIndex: backSlot.zIndex });
                        },
                        undefined,
                        "return"
                    );
                    tl.set(elFront, { x: backSlot.x, z: backSlot.z }, "return");
                    tl.to(
                        elFront,
                        {
                            y: backSlot.y,
                            duration: config.durReturn,
                            ease: config.ease,
                        },
                        "return"
                    );

                    tl.call(() => {
                        order.current = [...rest, front];
                    });
                };

                swap();
                intervalRef.current = window.setInterval(swap, delay);

                if (pauseOnHover) {
                    const node = container.current;
                    const pause = () => {
                        tlRef.current?.pause();
                        clearInterval(intervalRef.current);
                    };
                    const resume = () => {
                        tlRef.current?.play();
                        intervalRef.current = window.setInterval(swap, delay);
                    };
                    node.addEventListener("mouseenter", pause);
                    node.addEventListener("mouseleave", resume);
                    return () => {
                        node.removeEventListener("mouseenter", pause);
                        node.removeEventListener("mouseleave", resume);
                        clearInterval(intervalRef.current);
                    };
                }
                return () => clearInterval(intervalRef.current);
            }, [cardDistance, verticalDistance, delay, pauseOnHover, skewAmount, easing]);

            const rendered = childArr.map((child, i) =>
                isValidElement(child)
                    ? cloneElement(child, {
                        key: i,
                        ref: refs[i],
                        style: { width, height, ...(child.props.style ?? {}) },
                        onClick: (e) => {
                            child.props.onClick?.(e);
                            onCardClick?.(i);
                        },
                    })
                    : child
            );

            return React.createElement(
                "div",
                {
                    ref: container,
                    className: "absolute bottom-0 right-0 transform translate-x-[5%] translate-y-[20%] origin-bottom-right perspective-[900px] overflow-visible max-[768px]:translate-x-[25%] max-[768px]:translate-y-[25%] max-[768px]:scale-[0.75] max-[480px]:translate-x-[25%] max-[480px]:translate-y-[25%] max-[480px]:scale-[0.55]",
                    style: { width, height },
                },
                rendered
            );
        };

        // Example usage in an App component
        const App = () => {
            return React.createElement(
                "div",
                { className: "min-h-screen bg-gray-900 flex items-center justify-center p-4" },
                React.createElement(
                    "div",
                    { className: "relative w-full max-w-4xl h-[500px]" },
                    React.createElement(
                        "div",
                        { className: "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-white text-center z-10" },
                        React.createElement("h1", { className: "text-5xl font-bold mb-4" }, "Card stacks have never looked so good"),
                        React.createElement("p", { className: "text-xl text-gray-300" }, "Just look at it go!")
                    ),
                    React.createElement(
                        CardSwap,
                        null,
                        React.createElement(Card, {
                            icon: Settings,
                            title: "Customizable",
                            description: "Card 1 Description",
                            borderColorClass: "border-green-500", // Example: green border
                        }),
                        React.createElement(Card, {
                            icon: Code,
                            title: "Reliable",
                            description: "Card 2 Description",
                            borderColorClass: "border-blue-500", // Example: blue border
                        }),
                        React.createElement(Card, {
                            icon: CheckCircle,
                            title: "Smooth",
                            description: "Card 3 Description",
                            borderColorClass: "border-purple-500", // Example: purple border
                        }),
                        React.createElement(Card, {
                            icon: Code,
                            title: "Flexible",
                            description: "Card 4 Description",
                            borderColorClass: "border-yellow-500", // Example: yellow border
                        })
                    )
                )
            );
        };

        // Render the App component
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(App));
    </script>
</body>
</html>
